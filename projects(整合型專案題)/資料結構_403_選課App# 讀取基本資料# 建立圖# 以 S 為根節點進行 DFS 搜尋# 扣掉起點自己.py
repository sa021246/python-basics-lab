# 資料結構 403 選課App

TQC+ 程式設計：資料結構 403 選課App
最新一次更新時間：2024-05-08 11:59:22

1. 題目說明：
請依下列題意進行作答，使輸出值符合題意要求。

2. 設計說明：
(1) CSF 為了增加學生的選課效率，開發一款可推薦修課的 App。

(2) CSF 開了  門課，若某位學生選了其中的任何一門課，這個 App 就會預測該名學生可能也會對某些課程有興趣，而自動推薦給這位學生，如此可增加這名學生的選課效率。

(3) 為了能夠準確地預測要推薦的課，CSF 設計出課程相關性地圖，如下圖所示。地圖上有  個點 , , , …,  代表課程，並挑選了  組課以線段相連，並根據過去的選課經驗給定  值，代表會同時選修  與  的相關性。

(4) 特別的是，地圖上之任意兩點  與  之間一定只有一條路徑 P 相互連接，而  與  的相關性就是路徑 P 上所有已知相關性的最小值（即路徑上的最小  值）。舉例：下圖中  與  的相關性為 min{4, 3, 6} = 3。

修課APP

(5) 請幫這個 App 寫一個程式來計算出與  相關性至少為  的課程數量有幾個（ 為一門待推薦的課程）。

3. 輸入輸出：
輸入說明
第 1 列：輸入三個正整數 、、，整數間使用半形空白間隔（其中， 為一門待推薦課程  中的 ）。
第 2~N 列：每列輸入三個正整數分別代表 、 與 ，整數間使用半形空白間隔（ 表示地圖上兩點  與  的相關性）。

範圍值：

2 ≤  ≤ 100
1 ≤ , ,  ≤ 
 ≤ 
 ≤ 
輸出說明
計算與  相關性至少為  的課程數量有幾個。

範例輸入1
3 2 4
1 2 3
1 3 2
範例輸出1
0
範例輸入2
6 4 6
4 2 10
3 6 3
5 3 8
2 3 6
1 6 4
範例輸出2
3
待編修檔案

#================================================================================

def dfs(curr, parent, min_so_far):
    if min_so_far >= K:
        result[0] += 1
    for neighbor, weight in graph[curr]:
        if neighbor != parent:
            dfs(neighbor, curr, min(min_so_far, weight))

# 讀取基本資料
N, S, K = map(int, input().split())
graph = [[] for _ in range(N + 1)]

# 建立圖
for _ in range(N - 1):
    u, v, w = map(int, input().split())
    graph[u].append((v, w))
    graph[v].append((u, w))

result = [0]
dfs(S, -1, float('inf'))  # 以 S 為根節點進行 DFS 搜尋

print(result[0] - 1)  # 扣掉起點自己
