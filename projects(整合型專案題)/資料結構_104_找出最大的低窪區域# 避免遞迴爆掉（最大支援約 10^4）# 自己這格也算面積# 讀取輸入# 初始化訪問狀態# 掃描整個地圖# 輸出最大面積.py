# 資料結構 104 找出最大的低窪區域

TQC+ 程式設計：資料結構 104 找出最大的低窪區域
最新一次更新時間：2024-05-08 13:06:29

1. 題目說明：
請依下列題意進行作答，使輸出值符合題意要求。

2. 設計說明：
(1) 市政府想要利用空拍影像來找出全市可能的淹水區域，目前市政府已經完成空拍、並將空拍影像劃分為小區塊，每個小區塊的面積皆為 1，再根據各區域的平均地勢高低標示出可能淹水的程度：0 ~ 5；其中「0」就是地勢最低的低窪區域（幾乎每次下大雨必淹的區塊），而「5」則為地勢最高的區域。

(2) 那些相連的低窪區塊就是需要投入經費來整治的區域，目前市政府團隊希望能優先處理影響最大的低窪區域。請你幫忙寫一支程式讀取空拍圖資區塊資料，並找出最大的相連低窪區域面積。

提示：建議使用二維陣列來處理資料。

注意：連續相連的低窪區塊的「相連」是指某區塊的上、下、左、右的區塊，但不列計斜對角。

3. 輸入輸出：
輸入說明
第 1 列：由半形空白間隔的兩個正整數 M、N，表示縱向與橫向的小區域數量（5 ≤ M, N ≤ 100）。
第 2~M+1 列：每一列有 N 個由半形空白間隔的數字（0 ~ 5）。其中，「0」代表會淹水的低窪區域，其他數字（1 ~ 5）則表示較不容易發生淹水的區域。

輸出說明
最大的相連低窪區域面積，若沒有低窪區域，則輸出「0」。

範例輸入1
6 6
3 2 3 2 3 3
2 0 0 0 2 2
2 0 1 0 0 3
3 0 0 2 2 3
2 0 0 0 0 2
3 2 3 2 2 3
範例輸出1
12
範例輸入2
10 8
3 0 0 0 0 0 0 0
2 2 2 2 2 2 2 0
3 3 2 0 0 2 2 0
0 1 0 0 0 0 2 0
0 1 2 2 2 0 2 0
0 1 0 2 2 0 2 0
0 1 0 0 0 0 2 0
0 1 2 0 0 2 2 0
0 1 2 2 2 2 2 0
0 0 0 0 0 0 0 0
範例輸出2
29
待編修檔案

#==================================================================================

import sys
sys.setrecursionlimit(10000)  # 避免遞迴爆掉（最大支援約 10^4）

def dfs(grid, visited, x, y, M, N):
    if x < 0 or x >= M or y < 0 or y >= N:
        return 0
    if visited[x][y] or grid[x][y] != 0:
        return 0

    visited[x][y] = True
    area = 1  # 自己這格也算面積
    area += dfs(grid, visited, x+1, y, M, N)
    area += dfs(grid, visited, x-1, y, M, N)
    area += dfs(grid, visited, x, y+1, M, N)
    area += dfs(grid, visited, x, y-1, M, N)
    return area

# 讀取輸入
M, N = map(int, input().split())
grid = []
for _ in range(M):
    row = list(map(int, input().split()))
    grid.append(row)

# 初始化訪問狀態
visited = [[False] * N for _ in range(M)]
max_area = 0

# 掃描整個地圖
for i in range(M):
    for j in range(N):
        if grid[i][j] == 0 and not visited[i][j]:
            area = dfs(grid, visited, i, j, M, N)
            if area > max_area:
                max_area = area

# 輸出最大面積
print(max_area)
